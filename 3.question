#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int burstTime;
    int waitingTime;
    int turnaroundTime;
} Process;

void calculateAverageTimes(Process processes[], int numProcesses) {
    int i, j;

    // Sort the processes based on burst times using selection sort
    for (i = 0; i < numProcesses - 1; i++) {
        int minIndex = i;
        for (j = i + 1; j < numProcesses; j++) {
            if (processes[j].burstTime < processes[minIndex].burstTime) {
                minIndex = j;
            }
        }

        // Swap processes
        Process temp = processes[minIndex];
        processes[minIndex] = processes[i];
        processes[i] = temp;
    }

    // Calculate waiting time and turnaround time for each process
    processes[0].waitingTime = 0;
    processes[0].turnaroundTime = processes[0].burstTime;

    for (i = 1; i < numProcesses; i++) {
        processes[i].waitingTime = processes[i - 1].burstTime + processes[i - 1].waitingTime;
        processes[i].turnaroundTime = processes[i].burstTime + processes[i].waitingTime;
    }

    // Calculate average waiting time and average turnaround time
    float avgWaitingTime = 0;
    float avgTurnaroundTime = 0;

    for (i = 0; i < numProcesses; i++) {
        avgWaitingTime += processes[i].waitingTime;
        avgTurnaroundTime += processes[i].turnaroundTime;
    }

    avgWaitingTime /= numProcesses;
    avgTurnaroundTime /= numProcesses;

    printf("Average Waiting Time: %.2f\n", avgWaitingTime);
    printf("Average Turnaround Time: %.2f\n", avgTurnaroundTime);
}

int main() {
    int numProcesses = 4;
    Process processes[numProcesses];

    // Initialize the processes
    processes[0].burstTime = 6;
    processes[1].burstTime = 8;
    processes[2].burstTime = 7;
    processes[3].burstTime = 3;

    calculateAverageTimes(processes, numProcesses);

    return 0;
}
