#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5

pthread_t philosophers[NUM_PHILOSOPHERS];
pthread_mutex_t forks[NUM_PHILOSOPHERS];
int state[NUM_PHILOSOPHERS];

void *philosopher(void *arg) {
    int philosopher_id = *(int *)arg;
    int left_fork = philosopher_id;
    int right_fork = (philosopher_id + 1) % NUM_PHILOSOPHERS;

    while (1) {
        printf("Philosopher %d is thinking.\n", philosopher_id);
        sleep(rand() % 5 + 1);

        printf("Philosopher %d is hungry.\n", philosopher_id);
        state[philosopher_id] = 1;
        if (state[(philosopher_id + NUM_PHILOSOPHERS - 1) % NUM_PHILOSOPHERS] != 2 &&
            state[(philosopher_id + 1) % NUM_PHILOSOPHERS] != 2) {
            state[philosopher_id] = 2;
            printf("Philosopher %d has started eating.\n", philosopher_id);
            sleep(rand() % 5 + 1);

            printf("Philosopher %d has finished eating.\n", philosopher_id);
            state[philosopher_id] = 0;
        }

        pthread_yield();
    }
}

int main() {
    int i;
    int philosopher_id[NUM_PHILOSOPHERS];

    srand(time(NULL));

    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&forks[i], NULL);
    }

    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        philosopher_id[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &philosopher_id[i]);
        printf("Philosopher %d has joined the table.\n", i);
    }

    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    for (i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&forks[i]);
    }

    return 0;
}
