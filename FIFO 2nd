#include<stdio.h>
int main()
{
    int pid[15];
    int bt[15];
    int n;
    printf("Enter the number of processes: ");
    scanf("%d",&n);

    printf("Enter process id of all the processes: ");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&pid[i]);
#include <stdio.h>
#include <stdbool.h>

#define NUM_FRAMES 3
#define NUM_PAGES 8

void print_frames(int frames[NUM_FRAMES]) {
    for (int i = 0; i < NUM_FRAMES; i++) {
        if (frames[i] == -1) {
            printf("- ");
        } else {
            printf("%d ", frames[i]);
        }
    }

    printf("Enter burst time of all the processes: ");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&bt[i]);
    printf("\n");
}

bool is_page_in_frames(int page, int frames[NUM_FRAMES]) {
    for (int i = 0; i < NUM_FRAMES; i++) {
        if (frames[i] == page) {
            return true;
        }
    }

    int i, wt[n];
    wt[0]=0;
    for(i=1; i<n; i++)
    {
        wt[i]= bt[i-1]+ wt[i-1];
    return false;
}

int main() {
    int page_sequence[NUM_PAGES] = {4, 1, 2, 4, 3, 2, 1, 5};
    int frames[NUM_FRAMES];
    for (int i = 0; i < NUM_FRAMES; i++) {
        frames[i] = -1;
    }

    printf("Process ID     Burst Time     Waiting Time     TurnAround Time\n");
    float twt=0.0;
    float tat= 0.0;
    for(i=0; i<n; i++)
    {
        printf("%d\t\t", pid[i]);
        printf("%d\t\t", bt[i]);
        printf("%d\t\t", wt[i]);
        printf("%d\t\t", bt[i]+wt[i]);
        printf("\n");
        twt += wt[i];
        tat += (wt[i]+bt[i]);
    int num_page_faults = 0;
    int next_frame_index = 0;
    for (int i = 0; i < NUM_PAGES; i++) {
        int page = page_sequence[i];

        if (!is_page_in_frames(page, frames)) {
            frames[next_frame_index] = page;
            next_frame_index = (next_frame_index + 1) % NUM_FRAMES;
            num_page_faults++;
        }

        print_frames(frames);
    }
    float att,awt;
    awt = twt/n;
    att = tat/n;
    printf("Avg. waiting time= %f\n",awt);
    printf("Avg. turnaround time= %f",att);
    printf("Number of page faults: %d\n", num_page_faults);

    return 0;
}
