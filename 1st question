#include <stdio.h>

#define NUM_PROCESSES 4
#define NUM_RESOURCES 3

int main()
{
    int claim[NUM_PROCESSES][NUM_RESOURCES] = {
        {3, 2, 2},
        {6, 1, 3},
        {3, 1, 4},
        {4, 2, 2}
    };

    int allocation[NUM_PROCESSES][NUM_RESOURCES] = {
        {1, 0, 0},
        {6, 1, 2},
        {2, 1, 1},
        {0, 0, 2}
    };

    int resource_vector[NUM_RESOURCES] = {9, 3, 6};
    int available[NUM_RESOURCES] = {0};
    int work[NUM_RESOURCES] = {0};
    int finish[NUM_PROCESSES] = {0};
    int safe_sequence[NUM_PROCESSES] = {0};
    int num_finished = 0;
    int i, j;

    // Calculate available resources
    for (j = 0; j < NUM_RESOURCES; j++) {
        for (i = 0; i < NUM_PROCESSES; i++) {
            available[j] += allocation[i][j];
        }
        available[j] = resource_vector[j] - available[j];
        work[j] = available[j];
    }

    // Check for a safe sequence
    while (num_finished < NUM_PROCESSES) {
        int found = 0;
        for (i = 0; i < NUM_PROCESSES; i++) {
            if (finish[i] == 0) {
                int can_finish = 1;
                for (j = 0; j < NUM_RESOURCES; j++) {
                    if (claim[i][j] - allocation[i][j] > work[j]) {
                        can_finish = 0;
                        break;
                    }
                }
                if (can_finish) {
                    found = 1;
                    for (j = 0; j < NUM_RESOURCES; j++) {
                        work[j] += allocation[i][j];
                    }
                    finish[i] = 1;
                    safe_sequence[num_finished] = i;
                    num_finished++;
                    break;
                }
            }
        }
        if (!found) {
            printf("Unsafe state\n");
            return 0;
        }
    }

    printf("Safe sequence:");
    for (i = 0; i < NUM_PROCESSES; i++) {
        printf(" P%d", safe_sequence[i]);
    }
    printf("\n");

    return 0;
}
